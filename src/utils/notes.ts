import { Config } from '@/utils/config';

type NotesMeta = Record<string, string>;

export const createNotes = (notes: string, meta: NotesMeta, { action }: Pick<Config, 'action'>) => {
  let body = `${notes}`;
  body += `\n<!-- ${action.name} - summary begin -->`;
  body += `\n## Summary\n\nFill in here the summary of the release.`;
  body += `\n<!-- ${action.name} - summary end -->`;
  body += `\n\n---\nAutomatically generated by [${action.name}](${action.url})`;
  body += `\n<!-- ${action.name} - meta begin -->`;
  for (const [key, value] of Object.entries(meta)) {
    body += `\n<!-- ${key} = ${value} -->`;
  }
  body += `\n<!-- ${action.name} - meta end -->`;
  return body;
};

export const updateNotes = (notes: string, body: string, { action }: Pick<Config, 'action'>) => {
  // Extract the existing summary and meta using the action's tags
  const summaryBeginTag = `<!-- ${action.name} - summary begin -->`;
  const summaryEndTag = `<!-- ${action.name} - summary end -->`;
  const metaBeginTag = `<!-- ${action.name} - meta begin -->`;
  const metaEndTag = `<!-- ${action.name} - meta end -->`;

  const summaryBeginIndex = body.indexOf(summaryBeginTag);
  const summaryEndIndex = body.indexOf(summaryEndTag);
  const metaBeginIndex = body.indexOf(metaBeginTag);
  const metaEndIndex = body.indexOf(metaEndTag);

  let summaryText = '';
  let metaText = '';

  if (summaryBeginIndex !== -1 && summaryEndIndex !== -1) {
    summaryText = body.substring(summaryBeginIndex, summaryEndIndex + summaryEndTag.length);
  }

  if (metaBeginIndex !== -1 && metaEndIndex !== -1) {
    metaText = body.substring(metaBeginIndex, metaEndIndex + metaEndTag.length);
  }

  // Construct new body with updated notes, existing summary, and meta information
  return `${notes}\n\n${summaryText}\n\n---\nAutomatically generated by [${action.name}](${action.url})\n\n${metaText}`;
};

export const notesMeta = (notes: string, { action }: Pick<Config, 'action'>): NotesMeta => {
  const metaBeginTag = `<!-- ${action.name} - meta begin -->`;
  const metaEndTag = `<!-- ${action.name} - meta end -->`;
  const metaStartIndex = notes.indexOf(metaBeginTag);
  const metaEndIndex = notes.indexOf(metaEndTag);

  const metaRecord: NotesMeta = {};

  if (metaStartIndex !== -1 && metaEndIndex !== -1) {
    // Extract the meta content
    const metaContent = notes.substring(metaStartIndex + metaBeginTag.length, metaEndIndex).trim();

    // Split the content into lines and then into key-value pairs
    const metaLines = metaContent
      .split('\n')
      .filter((line) => line.startsWith('<!--') && line.endsWith('-->'));

    for (const line of metaLines) {
      // Removing comment tags and extra spaces
      const cleanedLine = line.replace('<!--', '').replace('-->', '').trim();

      // Splitting the line into key and value by '='
      const [key, value] = cleanedLine.split('=').map((part) => part.trim());

      if (key && value) {
        metaRecord[key] = value;
      }
    }
  }

  return metaRecord;
};
